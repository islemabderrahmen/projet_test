package tn.examen.templateexamen2324.services;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.Charge;
import com.stripe.model.PaymentIntent;
import com.stripe.param.PaymentIntentCreateParams;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class StripePaymentService {

    @Value("${stripe.secretKey}")
    private String stripeSecretKey;

    /**
     * Creates a Stripe Payment Intent and returns the client secret.
     *
     * @param amount   The amount to charge (in the base unit of the currency, e.g., cents for USD)
     * @param currency The currency code (e.g., "usd")
     * @return The client secret for the Payment Intent
     */
    public String createPaymentIntent(double amount, String currency) {
        Stripe.apiKey = stripeSecretKey;

        try {
            PaymentIntent intent = PaymentIntent.create(
                    new PaymentIntentCreateParams.Builder()
                            .setAmount((long) (amount * 100)) // Convert to cents
                            .setCurrency(currency)
                            .build()
            );

            return intent.getClientSecret();
        } catch (StripeException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Processes a payment using a Stripe token created on the client.
     *
     * @param token    The payment token generated by Stripe on the client-side
     * @param amount   The amount to charge
     * @param currency The currency code
     * @return The ID of the Charge object if successful, null otherwise
     */
    public String processPayment(String token, double amount, String currency) {
        Stripe.apiKey = stripeSecretKey;

        try {
            Charge charge = Charge.create(
                    Map.of(
                            "amount", (long) (amount * 100), // Convert to cents
                            "currency", currency,
                            "source", token
                    )
            );

            return charge.getId();
        } catch (StripeException e) {
            e.printStackTrace();
            return null;
        }
    }
}
